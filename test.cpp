#include <iostream>
#include <string>
#include <cassert>
#include "bigInteger.h"
#include "utility.h"
#include "millerrabin.h"

using namespace::std;

void test_sqrt() {
	vector<string> nums{
		"25466474197", "381527468860", "868794422257", "481425579459", "863464298525", "295207513073", "53326191830", "235019039994", "634043391868", "741453619230", "158465215070", "823236444003", "676853336359", "505548492113", "857031403516", "201312725197", "978590133916", "412120230115", "598505098509", "556722906540", "121492202229", "485262891721", "285153512749", "848382464998", "600073387934", "153450753129", "706309849304", "350723613947", "708167860032", "83637896618"
	}, sqrts{
		"159582", "617679", "932091", "693848", "929227", "543330", "230924", "484787", "796268", "861077", "398076", "907323", "822710", "711019", "925759", "448678", "989237", "641965", "773631", "746138", "348557", "696608", "533997", "921076", "774644", "391727", "840422", "592219", "841527", "289202"
	};
	for (int i = 0; i < (int)nums.size(); ++i) {
		bigInteger num(nums[i]);
		if (num.sqrt().getNumber() != sqrts[i]) {
			fatal("sqrt(%s) != %s\n", nums[i].c_str(), sqrts[i].c_str());
		}
	}
}

void test_divide() {
	vector<string> dividends {
		"679759757443", "840448997152", "768081165462", "279725109227", "84494169698", "71027790072", "838619339123", "803716814745", "23549969625", "319433666386", "459224411958", "708529502050", "448046674068", "220554081593", "289803290091", "25040606417", "250481363715", "189104724861", "613418223877", "60714646157", "493865053538", "443036746157", "650915790900", "566753183788", "908460318608", "319693854597", "940270280557", "199272383294", "764894515200", "23545657869"
	}, divisors {
		"6827203466", "4475954446", "9288792993", "7340639013", "736398565", "444479554", "5343074862", "8092969174", "9229430179", "8784213939", "7935900444", "2868894134", "7605572521", "5120093882", "2854874353", "3739082855", "5713643115", "9550353804", "1830128845", "9177602604", "501078201", "5669543626", "3794615477", "9584277613", "7992640288", "434320695", "5230199159", "8870508392", "2502516470", "6849686015"
	}, ans {
		"99", "187", "82", "38", "114", "159", "156", "99", "2", "36", "57", "246", "58", "43", "101", "6", "43", "19", "335", "6", "985", "78", "171", "59", "113", "736", "179", "22", "305", "3"
	};
	for (size_t i = 0; i < ans.size(); ++i) {
		bigInteger dividend(dividends[i]), divisor(divisors[i]);
		bigInteger q = dividend / divisor;
		if (q.getNumber() != ans[i]) {
			fatal("%s / %s != %s\n",
				dividend.getNumber().c_str(),
				divisor.getNumber().c_str(),
				ans[i].c_str());
		}
	}
}

void test_binToBigInteger() {
	vector<string> bins{{0x1b}, {0x01, (char)0xff}, {(char)0xb1, (char)0x87}};
	vector<string> bigInts{"27", "511", "45447"};
	for (size_t i = 0; i < bins.size(); ++i) {
		assert(binToBigInteger(bins[i]) == bigInts[i]);
	}
}

void test_computeY() {
	bigInteger a(2), r("111381455941452599284158543617336073123"), n("222762911882905198568317087234672146247");
	bigInteger y = computeY(a, r, n);
	y = y * y % n;
	assert(y == 1);
}

void test_power() {
	vector<bigInteger> nums{
		6, 1, 6, 3, 4, 2, 6, 6, 6, 4, 7, 3, 8, 8, 0, 8, 4, 9, 0, 8
	}, ans{
		string("2227915756473955677973140996096"), 1, string("2227915756473955677973140996096"), 3486784401, 1, 65536, 7776, 36, 6, 262144, string("459986536544739960976801"), 387420489, 16777216, string("302231454903657293676544"), 0, string("302231454903657293676544"), string("17592186044416"), 3486784401, 0, string("37778931862957161709568")
	};
	vector<size_t> t{
		39, 12, 39, 20, 0, 16, 5, 2, 1, 9, 28, 18, 8, 26, 16, 26, 22, 10, 23, 25
	};
	for (size_t i = 0; i < t.size(); ++i) {
		assert(nums[i].power(t[i]) == ans[i]);
	};
}

void test_bits() {
	bigInteger n(string("18069603919893755869"));
	assert(n.bits() == 64);
}

int main() {
	test_sqrt();
	test_divide();
	test_binToBigInteger();
	test_computeY();
	test_power();
	test_bits();
}
